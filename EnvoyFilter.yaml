apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: add-header-based-on-inbound
  namespace: your-namespace
spec:
  workloadSelector:
    labels:
      app: your-app-label
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              local headers = request_handle:headers()
              local special_header = headers:get("X-Special-Header")
              if special_header and special_header == "true" then
                -- Store the header value in a custom header for outbound use
                request_handle:headers():add("x-original-header", special_header)
              end
            end
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              local headers = request_handle:headers()
              local original_header = headers:get("x-original-header")
              if original_header and original_header == "true" then
                -- Add the original header value to the outbound request
                request_handle:headers():add("X-Special-Header", "true")
              end
            end
